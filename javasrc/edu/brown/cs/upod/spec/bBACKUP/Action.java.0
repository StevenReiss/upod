/********************************************************************************/
/*										*/
/*		Action.java							*/
/*										*/
/*	Action definitions for user-programming of devices			*/
/*										*/
/********************************************************************************/
/*	Copyright 2013 Brown University -- Steven P. Reiss		      */
/*********************************************************************************
 *  Copyright 2013, Brown University, Providence, RI.				 *
 *										 *
 *			  All Rights Reserved					 *
 *										 *
 *  Permission to use, copy, modify, and distribute this software and its	 *
 *  documentation for any purpose other than its incorporation into a		 *
 *  commercial product is hereby granted without fee, provided that the 	 *
 *  above copyright notice appear in all copies and that both that		 *
 *  copyright notice and this permission notice appear in supporting		 *
 *  documentation, and that the name of Brown University not be used in 	 *
 *  advertising or publicity pertaining to distribution of the software 	 *
 *  without specific, written prior permission. 				 *
 *										 *
 *  BROWN UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS		 *
 *  SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND		 *
 *  FITNESS FOR ANY PARTICULAR PURPOSE.  IN NO EVENT SHALL BROWN UNIVERSITY	 *
 *  BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 	 *
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,		 *
 *  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS		 *
 *  ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 	 *
 *  OF THIS SOFTWARE.								 *
 *										 *
 ********************************************************************************/





package edu.brown.cs.upod.spec;






/**
 *	This interface defines an action that can be triggered by a set of user
 *	specified conditions.
 *
 *	Actions typically releate to setting a particular state of a particular
 *	entity.  The Action interface needs to define what is meant by an entity,
 *	a state, a state change, etc.  It also has to define how we determine when
 *	two actions may be in conflict with one another.
 *
 **/



public interface Action {


/**
 *	Return the entity associated with this action.	Each action refers to
 *	setting a particular state of a particular entity.
 **/

Entity getEntity();



/**
 *	Return the transition associated with a given entity.
 **/

Transition getTransition();



/**
 *	Return a short name for this action
 **/

String getName();


/**
 *	Return a detailed description of this action.
 **/

String getDescription();



/**
 *	Determine how this action interacts with another action.  Two actions
 *	can have different relationships (see the enumeration Interact).  They
 *	can be independent (i.e. no interference); they can be contradictory;
 *	one can be a subset of the other (i.e. turning one light on vs. turning
 *	all lights off); one action can imply the other; ...
 *
 **/

Interaction getConflicts(Action act);



enum Interaction {
   NO_CONFLICT,
   CONTRADITORY,
   IMPLIES,
   SUBACTION
}




}	// end of interface Action




/* end of Action.java */
