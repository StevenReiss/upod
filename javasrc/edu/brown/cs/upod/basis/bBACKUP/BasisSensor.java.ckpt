/********************************************************************************/
/*                                                                              */
/*              BasisSensor.java                                                */
/*                                                                              */
/*      description of class                                                    */
/*                                                                              */
/********************************************************************************/
/*      Copyright 2013 Brown University -- Steven P. Reiss                    */
/*********************************************************************************
 *  Copyright 2013, Brown University, Providence, RI.                            *
 *                                                                               *
 *                        All Rights Reserved                                    *
 *                                                                               *
 *  Permission to use, copy, modify, and distribute this software and its        *
 *  documentation for any purpose other than its incorporation into a            *
 *  commercial product is hereby granted without fee, provided that the          *
 *  above copyright notice appear in all copies and that both that               *
 *  copyright notice and this permission notice appear in supporting             *
 *  documentation, and that the name of Brown University not be used in          *
 *  advertising or publicity pertaining to distribution of the software          *
 *  without specific, written prior permission.                                  *
 *                                                                               *
 *  BROWN UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS                *
 *  SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND            *
 *  FITNESS FOR ANY PARTICULAR PURPOSE.  IN NO EVENT SHALL BROWN UNIVERSITY      *
 *  BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY          *
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,              *
 *  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS               *
 *  ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE          *
 *  OF THIS SOFTWARE.                                                            *
 *                                                                               *
 ********************************************************************************/



package edu.brown.cs.upod.basis;

import edu.brown.cs.upod.upod.*;

import edu.brown.cs.ivy.swing.*;
import edu.brown.cs.ivy.xml.*;

import org.w3c.dom.Element;

import java.util.*;



public abstract class BasisSensor implements BasisConstants, UpodSensor
{


/********************************************************************************/
/*                                                                              */
/*      Private Storage                                                         */
/*                                                                              */
/********************************************************************************/

protected UpodUniverse  for_universe;
private Object          current_state;
private boolean         is_enabled;
private SwingEventListenerList<UpodSensorHandler> sensor_handlers;
private String          sensor_uid;


/********************************************************************************/
/*                                                                              */
/*      Constructors                                                            */
/*                                                                              */
/********************************************************************************/

protected BasisSensor(UpodUniverse uu)
{
   for_universe = uu;
   
   current_state = null;
   
   sensor_handlers = 
      new SwingEventListenerList<UpodSensorHandler>(UpodSensorHandler.class);
   
   sensor_uid = BasisWorld.getNewUID();
   
   is_enabled = true;
}






protected BasisSensor(UpodUniverse uu,Element xml) 
{
   for_universe = uu;
   current_state = null;
   sensor_handlers = 
      new SwingEventListenerList<UpodSensorHandler>(UpodSensorHandler.class);
   
   sensor_uid = IvyXml.getAttrString(xml,"ID");
   if (sensor_uid == null) sensor_uid = BasisWorld.getNewUID();
   
   is_enabled = IvyXml.getAttrBool(xml,"ENABLED",true);
}




/********************************************************************************/
/*                                                                              */
/*      Public Access methods                                                   */
/*                                                                              */
/********************************************************************************/

@Override public abstract String getName();
@Override public abstract String getDescription();

@Override public final String getUID()          { return sensor_uid; }

@Override public String getLabel()              { return getName(); }



@Override public List<Object> getStates()                       { return null; } 
@Override public UpodCondition getCondition(Object o)           { return null; }


@Override public Object getCurrentState(UpodWorld w)
{
   if (w == null) {
      w = BasisFactory.getFactory().getCurrentWorld(getUniverse());
    }
   if (!isEnabled()) return null;
   
   if (w.isCurrent()) {
      checkCurrentState();
      return current_state;
    }
   else {
      updateWorldState(w);
      Object v = w.getProperty(getUID());
      String st = null;
      if (v != null) st = v.toString();
      return st;
    }
}




protected void updateCurrentState()             { }
protected void updateWorldState(UpodWorld w)    { }

protected void checkCurrentState()              { updateCurrentState(); }
   
   

@Override public void addSensorHandler(UpodSensorHandler hdlr)
{
   sensor_handlers.add(hdlr);
}



@Override public void removeSensorHandler(UpodSensorHandler hdlr)
{
   sensor_handlers.remove(hdlr);
}



@Override public UpodUniverse getUniverse()
{
   return for_universe;
}


protected UpodWorld getCurrentWorld()
{
   return BasisFactory.getFactory().getCurrentWorld(for_universe);
}

/********************************************************************************/
/*                                                                              */
/*      Sensor update methods                                                   */
/*                                                                              */
/********************************************************************************/

@Override public void setStateInWorld(Object state,UpodWorld w)
{
   setState(state,w);
}



protected void setState(Object state,UpodWorld w) {
   if (state == null) return;
   if (!isEnabled()) return;
   
   String valprop = getValuePropertyName();
   String timeprop = getTimePropertyName();
   
   Object oldstate = getCurrentState(w);
   if (state.equals(oldstate)) {
      if (w.isCurrent()) return;
      long ot = w.getLongProperty(timeprop,0);
      if (ot > 0 || ot <= w.getTime()) return;
    }  
   
   if (w.isCurrent()) {
      current_state = state;
    }
   else {
      w.setProperty(valprop,state);
      w.setProperty(timeprop,w.getTime());
    }
   
   for (UpodSensorHandler hdlr : sensor_handlers) {
      hdlr.sensorStateChanged(w,this);
    }
}


public void setCurrentState(Object st)
{
   UpodWorld w = BasisFactory.getFactory().getCurrentWorld(getUniverse());
   setState(st,w);
}


@Override public void addProperties(UpodPropertySet props)
{
   props.put(getValuePropertyName(),current_state);
   props.put(getTimePropertyName(),0);
}


protected String getTimePropertyName()
{
   return getUID() + "_TIME";
}

protected String getValuePropertyName()
{
   return getUID();
}


@Override public void enable(boolean fg)    
{
   if (fg == is_enabled) return;
   
   UpodWorld w = BasisFactory.getFactory().getCurrentWorld(getUniverse());
   is_enabled = fg;
   for (UpodSensorHandler hdlr : sensor_handlers) {
      hdlr.sensorStateChanged(w,this);
    }
   
   if (fg) updateCurrentState();
}

@Override public boolean isEnabled()            { return is_enabled ; }


@Override public void outputXml(IvyXmlWriter xw)
{
   xw.begin("SENSOR");
   xw.field("CLASS",getClass().getName());
   xw.field("NAME",getName());
   xw.field("DESC",getDescription());
   xw.field("LABEL",getLabel());
   xw.field("ID",getUID());
   xw.field("ENABLED",isEnabled());
   
   outputLocalXml(xw);
   
   xw.end("SENSOR");
}


protected void outputLocalXml(IvyXmlWriter xw)          { }



/********************************************************************************/
/*                                                                              */
/*      Auxilliary methods for sensors                                          */
/*                                                                              */
/********************************************************************************/

protected Timer getTimer()
{
   return BasisWorld.getWorldTimer();
}




}       // end of class BasisSensor




/* end of BasisSensor.java */

